/*
 * Функции
 * - Функциональные выражения
 * - Аргументы и параметры
 * - Возврат значения
 */

// // функциональное выражение, что сделать? 
// const add = function(x, y){
//     // параметры x, y
//     console.log(x);
//     console.log(y);

//     console.log('Виконує функцію add');

//     // что я хочу вернуть из ф-ции
//     return x + y;
// }

// // виклик функції add(2, 3) - передача аргументів(значення для параметрів)
// console.log(add(5, 3));

// // в r1 записывается результат вызова ф-ции add() - это что в return
// const r1 = add(2, 3);
// console.log('r1: ', r1);
// // Все что ф-ция использует вы должны передавать как аргумент

// const fn = function(value){
//     console.log(1);
//     console.log(2);

//     if (value < 50) {
//         return 'Меньше чем 50';
//     }

//     // где вы поставите return там прикратится выполнение ф-ции
//     return 'Больше чем 50';
// }

// console.log('Результат функции: ', fn(10));

// console.log('Результат функции: ', fn(1000));

/*
 * - Стек вызовов
 * - Stack trace и поиск ошибок
 */

const fnA = function () {
    console.log('Выполняется функция A');

    fnB()
  };
  
  const fnB = function () {
    console.log('Выполняется функция B');

    fnC()
  };
  
  const fnC = function () {
    console.log('Выполняется функция C');

    // ошибка всегда в самом верхнем стеке
    console.log(value)
  };

  
// console.log('Лог перед вызовом функции A');

fnA();

// console.log('Лог после вызова функции A');

// console.log('Лог перед вызовом функции B');
// fnB();
// console.log('Лог после вызова функции B');

// console.log('Лог перед вызовом функции C');
// fnC();
// console.log('Лог после вызова функции C');