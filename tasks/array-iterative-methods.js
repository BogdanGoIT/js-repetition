// const numbers = [1,2,3,4,5,6,7];

// function mult(element){
//     console.log(element * 2)
// }

// for(let i = 0; i < numbers.length; i += 1){
//     mult(numbers[i])
// }

// for(let i = 0; i < numbers.length; i += 1){
//     console.log(numbers[i] * 2)
// }

// numbers.forEach(function (element) {
//     console.log(element * 2)
// })

// numbers.forEach(element => console.log(element * 2))

// numbers.forEach((number, index, arr) => console.log(number > arr[index - 1]))

// console.log(numbers);

//   const allCourses = ["JS", "HTML", "JS", "React"];
//   console.log(allCourses)

//   const uniqueCourses = allCourses.filter(
//     (course, index, array) => array.indexOf(course) === index
//   );

//   console.log(uniqueCourses);

// 1 - –ø—Ä–∏ –ø–µ—Ä—à—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó –º—ã —à—É–∫–∞–µ–º index –≤ –º–∞—Å—Å–∏–≤—ñ ["JS", "HTML", "JS", "React"].indexOf("JS")  
// course = "JS"
// index = allCourses.indexOf("JS")
// 0 === 0 // true
// ["JS"]

// 2
// course = "HTML"
// index = allCourses.indexOf("HTML")
// 1 === 1 // true
// ["JS", "HTML"]

// 3
// course = "JS"
// index = allCourses.indexOf("JS")
// 0 === 2 // false
// ["JS", "HTML"]

// –£–Ω–∏–∫–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
// console.log(new Set(allCourses))


// # –ú–æ–¥—É–ª—å 4. –ó–∞–Ω—è—Ç–∏–µ 7. –ö–æ–ª–ª–±–µ–∫–∏. –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. forEach

// ## Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏

// –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:

// - `createProduct(obj, callback)` - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ id, –∞ —Ç–∞–∫–∂–µ
//   –∫–æ–ª–±–µ–∫. –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –æ–±—å–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è—è –µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤
//   —Å–≤–æ–π—Å—Ç–≤–æ `id` –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—å–µ–∫—Ç.
// - `logProduct(product)` - –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—å–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π –µ–≥–æ –≤
//   –∫–æ–Ω—Å–æ–ª—å
// - `logTotalPrice(product)` - –∫–æ–ª–ª–±–µ–∫ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—å–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π
//   –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

// ```js
// // –†–µ—à–µ–Ω–∏–µ

// function logProduct(product){
//     console.log(product);
// }

// function logTotalPrice({price, quantity}){
//     console.log(price * quantity)
// }

// function createProduct(obj, cb){
//     const product = {
//         ...obj,
//         id: Date.now(),
//     }
//     cb(product);
// }

// createProduct({ name: "üçé", price: 30, quantity: 3 }, logProduct);
// createProduct({ name: "üçã", price: 20, quantity: 5 }, logTotalPrice);]


// ## Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—ä–µ–∫—Ç—É `account` –º–µ—Ç–æ–¥—ã `withdraw(amount, onSuccess, onError)` –∏
// `deposit(amount, onSuccess, onError)`, –≥–¥–µ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞
// –≤—Ç–æ—Ä–æ–π –∏ —Ç—Ä–µ—Ç–∏–π - –∫–æ–ª–±–µ–∫–∏.

// –ú–µ—Ç–æ–¥ `withdraw` –≤—ã–∑—ã–≤–∞–µ—Ç onError –µ—Å–ª–∏ amount –±–æ–ª—å—à–µ TRANSACTION_LIMIT –∏–ª–∏
// this.balance, –∏ onSuccess –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

// –ú–µ—Ç–æ–¥ `deposit` –≤—ã–∑—ã–≤–∞–µ—Ç onError –µ—Å–ª–∏ amount –±–æ–ª—å—à–µ TRANSACTION_LIMIT –∏–ª–∏ –º–µ–Ω—å—à–µ
// –ª–∏–±–æ —Ä–∞–≤–µ–Ω –Ω—É–ª—é, –∏ onSuccess –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

// ```js
// // –†–µ—à–µ–Ω–∏–µ

// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: "Jacob",
//   balance: 400,

//   // –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é callback –≤—ã –º–æ–∂–µ—Ç–µ —Ä–æ–∑—à–∏—Ä—è—Ç–∏ –ª–æ–≥—ñ–∫—É –≤–∂–µ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ-—Ü—ñ–π, –Ω–µ –ø–∏—à—É—á–∏ –≤ —Ü–∏—Ö —Ñ-—Ü—ñ—è –Ω—ñ—á–æ–≥–æ –Ω–æ–≤–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ callback —è–∫—ñ –≤–∏ –ø–µ—Ä–µ–¥–∞–ª–∏
//   withdraw(amount, onSuccess, onError) {
//     if(amount > TRANSACTION_LIMIT){
//         onError("–°—É–º–∞ –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç");
//         return
//     }
//     if(amount > this.balance){
//         onError("–°—É–º–∞ –ø–µ—Ä–µ–≤–∏—â—É—î –±–∞–ª–∞–Ω—Å –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É");
//         return
//     }

//     this.balance -= amount;
//     onSuccess('–û–ø–µ—Ä–∞—Ü—ñ—è –ø–æ –∑–Ω—è—Ç—Ç—é –∫–æ—à—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–∞')
//   },
//   deposit(amount, onSuccess, onError){
//     if(amount > TRANSACTION_LIMIT){
//         onError("–°—É–º–∞ –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç");
//         return
//     }
//     if(amount < 0){
//         onError("–°—É–º–∞ –º–µ–Ω—å—à–∞ 0");
//         return
//     }
//     if(amount === 0){
//         onError("–°—É–º–∞ –¥–æ—Ä—ñ–≤–Ω—é—î 0");
//         return
//     }
//     onSuccess('–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ')
//     this.balance += amount
//   }
// }

// function handleSuccess(message) {
//   console.log(`‚úÖ Success! ${message}`);
// }
// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);


// ## Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `each(array, callback)`, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ–∂–∏–¥–∞–µ—Ç
// –º–∞—Å—Å–∏–≤, –∞ –≤—Ç–æ—Ä—ã–º - —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞.
// –§—É–Ω–∫—Ü–∏—è each –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
// –≤—ã–∑–æ–≤–∞ –∫–æ–ª–ª–±–µ–∫–∞.

// const each = (array, callback) => {
//     const result = []
//     for(const element of array){
//         result.push(callback(element))
//     }

//     return result;
// }

// console.log(each([64, 49, 36, 25, 16],  value => value * 2));

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
//   })
// );

// console.log(
//   each([64, 49, 36, 25, 16], value => Math.sqrt(value))
// );

// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.ceil(value))); //25.8 => 26 25.001 => 26

// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], (value) => Math.floor(value)));


// ## Example 7 - –ú–µ—Ç–æ–¥ forEach - –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î, –∞ –ª–∏—à–µ –ø–µ—Ä–µ–±–∏—Ä–∞ –º–∞—Å–∏–≤

// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ `forEach` –∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.

// ```js
// function logItems(items) {
//   console.log(items);
//   for (let i = 0; i < items.length; i += 1) {
//     console.log(`${i + 1} - ${items[i]}`);
//   }
// }

// const logItems = (items) => {
//     console.log(items);
//     [...items].forEach((item, index) =>  console.log(`${index + 1} - ${item}`) )
//   }

// console.log(logItems(["Mango", "Poly", "Ajax"]));
// console.log(logItems(["üçé", "üçá", "üçë", "üçå", "üçã"]));


// lesson #8

// # –ú–æ–¥—É–ª—å 4. –ó–∞–Ω—è—Ç–∏–µ 8. –ü–µ—Ä–µ–±–∏—Ä–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–∞

// ## –ö–æ–ª–ª–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
// const cars = [
//     {
//       make: "Honda",
//       model: "CR-V",
//       type: "suv",
//       amount: 14,
//       price: 24045,
//       onSale: true,
//     },
//     {
//       make: "Honda",
//       model: "Accord",
//       type: "sedan",
//       amount: 2,
//       price: 22455,
//       onSale: true,
//     },
//     {
//       make: "Mazda",
//       model: "Mazda 6",
//       type: "sedan",
//       amount: 8,
//       price: 24195,
//       onSale: false,
//     },
//     {
//       make: "Mazda",
//       model: "CX-9",
//       type: "suv",
//       amount: 7,
//       price: 31520,
//       onSale: true,
//     },
//     {
//       make: "Toyota",
//       model: "4Runner",
//       type: "suv",
//       amount: 19,
//       price: 34210,
//       onSale: false,
//     },
//     {
//       make: "Toyota",
//       model: "Sequoia",
//       type: "suv",
//       amount: 16,
//       price: 45560,
//       onSale: false,
//     },
//     {
//       make: "Toyota",
//       model: "Tacoma",
//       type: "truck",
//       amount: 4,
//       price: 24320,
//       onSale: true,
//     },
//     {
//       make: "Ford",
//       model: "F-150",
//       type: "truck",
//       amount: 11,
//       price: 27110,
//       onSale: true,
//     },
//     {
//       make: "Ford",
//       model: "Fusion",
//       type: "sedan",
//       amount: 13,
//       price: 22120,
//       onSale: true,
//     },
//     {
//       make: "Ford",
//       model: "Explorer",
//       type: "suv",
//       amount: 6,
//       price: 31660,
//       onSale: false,
//     },
//   ];

// console.table(cars);

// ## Example 1 - –ú–µ—Ç–æ–¥ map

// —à–∞–±–ª–æ–Ω —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ - –º–∞—Å—Å–∏–≤.–º–µ—Ç–æ–¥(function callback(–µ–ª–µ–º–µ–Ω—Ç, —ñ–Ω–¥–µ–∫—Å, –º–∞—Å—Å–∏–≤) {})

// array.method((element, index, array) => {
//     // some logic
// })

// ```js

// —è–≤–Ω–∏–π return
// const getModels = function(cars){
//     return cars.map(car => car.model)
// }

// –Ω–µ —è–≤–Ω–∏–π return
// const getModels = cars => cars.map(car => car.model);

// console.log(getModels(cars));
// console.table(cars);


// ## Example 2 - –ú–µ—Ç–æ–¥ map

// –ü—É—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è `makeCarsWithDiscount` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–∑–º–µ–Ω–Ω—ã–º
// –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ `price` –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏.

// const makeCarsWithDiscount = (cars, discount) => {
//     return cars.map(car => {
//         return {
//             ...car,
//             price: (1-discount) * car.price,
//         }
//     })
// };

// const makeCarsWithDiscount = (cars, discount) => cars.map(car => 
//     ({
//         ...car, 
//         price: (1-discount) * car.price
//     })
// );


// console.table(makeCarsWithDiscount(cars, 0.2));
// console.table(makeCarsWithDiscount(cars, 0.4));


// ## Example 3 - –ú–µ—Ç–æ–¥ filter

// –ü—É—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è `filterByPrice` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Ü–µ–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–µ–Ω—å—à–µ
// —á–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `threshold`.

// —è–∫—â–æ –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –±—É–¥–µ true —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç –ø–æ–ø–∞–¥–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ filter 
// const filterByPrice = (cars, threshold) => cars.filter(car => car.price < threshold)

// console.table(filterByPrice(cars, 30000));
// console.table(filterByPrice(cars, 25000));


// ## Example 4 - –ú–µ—Ç–æ–¥ filter

// –ü—É—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è `getCarsWithDiscount` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å–≤–æ–π—Å—Ç–≤–æ
// onSale –∫–æ—Ç–æ—Ä—ã—Ö true.

// –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ
// const getCarsWithDiscount = cars => cars.filter(car => car.onSale);

// –Ω–µ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ, –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è
// const getCarsWithDiscount = cars => cars.filter(({onSale}) => !onSale);

// console.table(cars);
// console.table(getCarsWithDiscount(cars));


// ## Example 6 - –ú–µ—Ç–æ–¥ find

// –∑–Ω–∞–π—Ç–∏ –º–∞—à–∏–Ω—É –ø–æ –º–æ–¥–µ–ª—è–º
// const getCarByModel = (cars, model) => cars.find(car => car.model === model);

// console.log(getCarByModel(cars, "F-150"));
// console.log(getCarByModel(cars, "CX-9"));


// ## Example 7 - –ú–µ—Ç–æ–¥ sort

// –ü—É—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è `sortByAscendingAmount` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
// –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑–≤—Ä–∞—Å—Ç–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ `amount`.

// ```js
// const sortByAscendingAmount = cars => [...cars].sort(
//     // —è–∫—â–æ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 0 —Ç–æ –≤—ñ–Ω –º—ñ–Ω—è—î –º—ñ—Å—Ü—è–º–∏ –æ–±—å–µ–∫—Ç.a —ñ –æ–±—å–µ–∫—Ç.b 
//     // —è–∫—â–æ -1 –≤—ñ–Ω –∑–∞–ª–∏—à–∞—î –Ω–∞ —Ç–∏—Ö —ñ–Ω–¥–µ–∫—Å–∞—Ö –Ω–∞ —è–∫–∏—Ö –≤–æ–Ω–∏ –±—É–ª–∏
//     // (a, b) => a.amount < b.amount ? -1 : 1); // 14 < 2 // false => 1
//     (a, b) => b.amount - a.amount); // 14 - 2 // 12 > 0 => 1
//     // b - 1 => 0

// console.table(sortByAscendingAmount(cars));


// ## Example 8 - –ú–µ—Ç–æ–¥ sort

// –ü—É—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è `sortByDescendingPrice` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
// –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ `price`.

// ```js
// const sortByDescendingPrice = (cars) => {
//   const carsCopy = [...cars];
//   return carsCopy.sort((a, b) => b.price - a.price);
// };

// const sortByDescendingPrice = cars => [...cars].sort((a, b) => a.price - b.price);

// console.table(sortByDescendingPrice(cars));


// ## Example 9 - –ú–µ—Ç–æ–¥ sort

// –ü—É—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è `sortByModel` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
// –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –∏ –æ–±—Ä–∞—Ç–Ω–æ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∑–∞—Å–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
// –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `order`.

// ```js
// const sortByModel = (cars, order) => {
//     if(order === "asc"){
//         return [...cars].sort((a, b)=> a.model.localeCompare(b.model))
//     }
//     if(order === "desc"){
//         return [...cars].sort((a, b)=> b.model.localeCompare(a.model))
//     }
// }
    
// console.table(sortByModel(cars, 'asc'));
// console.table(sortByModel(cars, 'desc'));


// ## Example 10 - –ú–µ—Ç–æ–¥ reduce

// –ü—É—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è `getTotalAmount` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π(–∑–Ω–∞—á–µ–Ω–∏–µ
// —Å–≤–æ–π—Å—Ç–≤ `amount`).

// const getTotalAmount = (cars) =>
//   cars.reduce((acc, car) => (acc += car.amount), 0);

// const reduceValue = (acc, car) => (acc += car.amount + car.price);
// acc = 0
// 2*6 = 12
// 0 + 12

// acc = acc + car.amount + car.price

// acc = 12
// 3 * 5 = 15
// acc = 15 + 12 = 27

// const getTotalAmount = (cars) =>
//   cars.reduce((acc, car) => (acc += car.amount * car.price), 0);

// const getTotalAmount = (cars) => cars.reduce(reduceValue, 0);

// cars.reduce(arg1, arg2);

// console.log(getTotalAmount(cars));


// ## Example 11 - –¶–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤

// –ü—É—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è `getAvailableCarNames` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –Ω–æ
// —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ.

// const getModelsOnSale = (cars) => 
//     cars
//         .filter(car => car.onSale)
//         .map(car => car.model)
//         .sort((a, b) => a.localeCompare(b))
//         .find(model => model === 'Fusion')
//         .toUpperCase()

// console.log(getModelsOnSale(cars))


// ## Example 12 - –¶–µ–ø–æ—á–∫–∏ –º–µ—Ç–æ–¥–æ–≤

// –ü—É—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è `getSortedCarsOnSale` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ
// (—Å–≤–æ–π—Å—Ç–≤–æ onSale), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã.

// const getSortedCarsOnSale = cars => cars.filter(car => car.onSale).sort((a, b) => a.price - b.price);

// console.table(getSortedCarsOnSale(cars));


// const bookShelf = {
//     books: ["The last kingdom", "Haze", "The guardian of dreams"],
  
//     updateBook(oldName, newName) {
//       // Change code below this line
//     const bookIndex = this.books.indexOf(oldName);
  
//     this.books.splice(bookIndex, 1, newName);
//       // Change code above this line
//     },
  
//   };
  


// const bookShelf = {
//     books: ["–û—Å—Ç–∞–Ω–Ω—î –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ"],
//     getBooks() {
//       console.log(this);
//     },
//   };
  
//   // –ü–µ—Ä–µ–¥ –∫—Ä–∞–ø–∫–æ—é –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –æ–±'—î–∫—Ç bookShelf,
//   // —Ç–æ–º—É, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ –º–µ—Ç–æ–¥, this –±—É–¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω—å–æ–≥–æ.
//   bookShelf.getBooks(); // {books: ["–û—Å—Ç–∞–Ω–Ω—î –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ"], getBooks: f}

// const bookShelf = {
//   books: ["–û—Å—Ç–∞–Ω–Ω—î –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ"],
//   getBooks() {
//     console.log(this);
//   },
// };

// // –ü–µ—Ä–µ–¥ –∫—Ä–∞–ø–∫–æ—é –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –æ–±'—î–∫—Ç bookShelf,
// // —Ç–æ–º—É, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ –º–µ—Ç–æ–¥, this –±—É–¥–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω—å–æ–≥–æ.
// bookShelf.getBooks(); // {books: ["–û—Å—Ç–∞–Ω–Ω—î –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ"], getBooks: f}


// // –î–ª—è —Ç–æ–≥–æ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –æ–±'—î–∫—Ç–∞ –≤ –º–µ—Ç–æ–¥–∞—Ö, –º–∏ –∑–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –Ω—å–æ–≥–æ —á–µ—Ä–µ–∑ this —ñ –¥–∞–ª—ñ, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ - ¬´—á–µ—Ä–µ–∑ –∫—Ä–∞–ø–∫—É¬ª –¥–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π.
// const bookShelf = {
//   books: ["–û—Å—Ç–∞–Ω–Ω—î –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ"],
//   getBooks() {
//     return this.books;
//   },
//   addBook(bookName) {
//     this.books.push(bookName);
//   },
//   removeBook(bookName) {
//     const bookIndex = this.books.indexOf(bookName);
//     this.books.splice(bookIndex, 1);
//   },
// };

// console.log(bookShelf.getBooks()); // ["–û—Å—Ç–∞–Ω–Ω—î –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ"]
// bookShelf.addBook("–Ü–º–ª–∞");
// bookShelf.addBook("–°—Ç—Ä–∞–∂ —Å–Ω—ñ–≤");
// console.log(bookShelf.getBooks()); // ["–û—Å—Ç–∞–Ω–Ω—î –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ", "–Ü–º–ª–∞", "–°—Ç—Ä–∞–∂ —Å–Ω—ñ–≤"]
// bookShelf.removeBook("–Ü–º–ª–∞");
// console.log(bookShelf.getBooks()); // ["–û—Å—Ç–∞–Ω–Ω—î –∫–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ", "–°—Ç—Ä–∞–∂ —Å–Ω—ñ–≤"]




  
  
  









  



























