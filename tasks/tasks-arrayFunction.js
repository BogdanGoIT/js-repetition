// —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏—Ä–∞–∑—É
// console.log(true && 4 && 'kiwi'); // kiwi
// console.log(true && 0 && 'kiwi'); // 0
// console.log(true || false || 7); // true
// console.log(null || 2 || undefined); // 2
// console.log((1 && null && 2) > 0) // null > 0 // false
// console.log(null || (2 && 3) || 4) // null || 3 || 4 // 3

// const a = [1, 2, 3];

// // a.push() - –¥–æ–±–∞–≤–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤–∞
// const result = a.push(4, 5, 6, 7);

// console.log(a);
// console.log(result); // return a.length // 7

// // a.pop() - –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤—ñ
// const del = a.pop();

// console.log(a);
// console.log(del); // return 7

// a.push(del);

// console.log(a);

// // # –ú–æ–¥—É–ª—å 2. –ó–∞–Ω—è—Ç–∏–µ 3. –ú–∞—Å—Å–∏–≤—ã

// // ## Example 1 - –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–æ–º

// // 1. –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ `genres` —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª –∏ ¬´Blues¬ª.
// // 2. –î–æ–±–∞–≤—å—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª–ª¬ª –≤ –∫–æ–Ω–µ—Ü.
// // 3. –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
// // 4. –í—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –º–∞—Å—Å–∏–≤–∞
// //    –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã.
// // 5. –£–¥–∞–ª–∏—Ç–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// // 6. –í—Å—Ç–∞–≤—å—Ç–µ ¬´Country¬ª –∏ ¬´Reggy¬ª –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞.

// const genres = ["Jazz", "Blues"];
// genres.push("–†–æ–∫-–Ω-—Ä–æ–ª–ª");
// console.log(genres[0]);
// console.log(genres[genres.length - 1]); // length = 3 // lastIndex = 2
// console.log(genres.shift());
// console.log(genres)
// genres.unshift("Country", "Reggy");
// console.log(genres);

// // ## Example 2 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// // –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–∏—è
// // –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `values` –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏. –ó–Ω–∞—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ
// // —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º.

// const values = "8 11";
// console.log(values);
// const numbers = values.split(" ");
// console.log(numbers)
// // const result = numbers[0] * numbers[1];

// // –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–≤—ñ —Å—Ç—Ä–æ–∫–∞–º–∏ –æ–±—î–¥–Ω—É—î –≤ –æ–¥–Ω—É
// const result = numbers[0] + numbers[1];
// –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–∞
// // const result = Number(numbers[0]) + Number(numbers[1]);
// console.log(result)

// // ## Example 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞

// // –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ `fruits` —Ü–∏–∫–ª–æ–º `for`. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
// // –º–∞—Å—Å–∏–≤–∞ –≤—ã–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–Ω–æ–º–µ—Ä_—ç–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–∏–µ_—ç–ª–µ–º–µ–Ω—Ç–∞`.
// // –ù—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `1`.

// const fruits = ["üçé", "üçá", "üçë", "üçå", "üçã"];

// for(let i=0; i < fruits.length; i+=1){
//     const index = i + 1;
//     const element = fruits[i];
//     console.log(`${index}: ${element}`);
// }

// for(const fruit of fruits){
//     const index = fruits.indexOf(fruit) + 1;
//     console.log(`${index}: ${fruit}`);
// }

// // ## Example 4 - –ú–∞—Å—Å–∏–≤—ã –∏ —Ü–∏–∫–ª—ã

// // –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í
// // –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö `names` –∏ `phones` —Ö—Ä–∞–Ω—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤,
// // —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞
// // —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.

// // –û–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –∫–æ–ª–∏ –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç—Ä–æ–∫ —Ä—ñ–∑–Ω–∞

// const names = "Jacob,William,Solomon,Artemis";
// const names = "Jacob,William,Solomon";

// const phones = "89001234567,89001112233,890055566377,890055566300";

// const names = "Jacob,William,Solomon,Artemis";

// const phones = "89001234567,89001112233,890055566377";

// const namesArray = names.split(',');
// const phonesArray = phones.split(',');

// let longestArray = (namesArray.length > phonesArray.length) ? namesArray : phonesArray;
// console.log(longestArray);

// for(let i = 0; i < longestArray.length; i += 1){
//     const names = namesArray[i] === undefined ? 'no name' : namesArray[i];// //   // iteration #1
//   // i = 0
//   // const name = namesArray[0]
//   // const name = 'Jacob' === undefined // false
//   // const name = namesArray[0] // Jacob;

//   // Iteration #4
//   // i = 3
//   // const name = namesArray[3]
//   // const name = undefined === undefined // true
//   // const name = 'no name'
//     const phone = phonesArray[i] === undefined ? 'no phone' : phonesArray[i];

//     console.log(`${names} - ${phone}`);
// }

// // ## Example 5 - –ú–∞—Å—Å–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ —Å–ª–æ–≤–∞ —Å—Ç—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏
// –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è
// –ø—Ä–æ–±–µ–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º. –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–∏.

// const string = "Welcome to the future";
// const array = string.split(' ');
// console.log(array);
// // shift, pop
// const copyArray = array.slice();
// copyArray.shift();
// copyArray.pop();
// const res = copyArray.join(" ");
// console.log(copyArray);
// console.log(res);

// splice - —Ä–æ–±–∏–º –∫–æ–ø—ñ—é –º–∞—Å—Å–∏–≤–∞
// const copyArray = array.slice();

// // –∑–≤—ñ–¥–∫–∏, —Å–∫—ñ–ª—å–∫–∏, —ñ —â–æ –Ω–∞ –π–æ–≥–æ –º—ñ—Å—Ü–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
// copyArray.splice(0, 1);
// copyArray.splice(copyArray.length - 1, 1);
// const res = copyArray.join(" ");
// console.log(res);


// function tasks
// // Lesson 4

// function calculate(a, b) {
//   function add(a, b) {
//     console.log(a + b);
//     return a + b;
//   }

//   add(a, b);
// }

// function sayHello(name) {
//   console.log(`Hello ${name}`);
// }

// calculate(10, 15);

// sayHello("John");


// Array.from(arguments)

// function add() {
// //   console.log(arguments);
//   const args = Array.from(arguments);
// //   console.log(args);
//   const numbers = [];
//   const strings = [];
//   for (let arg of args) {
//     if (typeof arg === "number") {
//       numbers.push(arg);
//     }

//     if (typeof arg === "string") {
//       strings.push(arg);
//     }
//   }
//   console.log(numbers);
//   console.log(strings);
// }

// add("2", "3", "4", 4, 5);
// add("2", "3", 4, 4, 5);
// add(2, 5);


// ## Example 2 - –ú–µ–Ω—å—à–µ–µ –∏–∑ —á–∏—Å–µ–ª

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é `min(a,b)`, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—å—à–µ–µ –∏–∑ —á–∏—Å–µ–ª `a` –∏ `b`.

// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1
// console.log(min(1, 1, 0)); // 0
// console.log(min(54, 37, 20)); // 37

// function min(a, b){
//     // if(a < b){
//     //     return a;
//     // }

//     // return b;
//     return a < b ? a : b;
// }

// [1, 2, 0];
// min = 54
// 54 < 54 // false
// min = 54
// 37 < 54 // true
// min = 54 => 37
// 20 < 37 // true
// min = 37 => 20

// function min() {
//   const args = Array.from(arguments);
//   let min = args[0];
//   for (let number of args) {
//     if (number < min) {
//       min = number; // –º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
//     }
//   }
//   return min;
// }


// ## Example 3 - –ü–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é `getRectArea(dimensions)` –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
// —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä `dimensions` –≤ –≤–∏–¥–µ
// —Å—Ç—Ä–æ–∫–∏. –ó–Ω–∞—á–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–±–µ–ª–æ–º.

// function getRectArea(width, height){
//     if(isNaN(width) || isNaN(height)){
//         return("–í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞");
        
//     }
    
//     if(width === null || height === null){
//         return("–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ");
//     }

//     return width * height;
// }

// const width = prompt('Enter width');
// const height = prompt('Enter height');

// console.log(getRectArea(width, height))

// ## Example 7 - –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

// –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `calAverage()` –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
// –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í—Å–µ –∞—Ä—É–≥–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞–º–∏.
// 1 –©–æ–± –∑–Ω–∞–π—Ç–∏ —Å—É–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∑—è—Ç–∏ —ñ –∫–æ–∂–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞ –¥–æ–¥–∞—Ç–∏
// 2 –Ü —Å—É–º—É –ø–æ–¥—ñ–ª–∏—Ç–∏ –Ω–∞ –∫-—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —Ü–µ –¥–æ–≤–∂–∏–Ω–∞ –º–∞—Å–∏–≤–∞

// function calAverage(...args){
//     // const args = Array.from(arguments);
//     // const numbersCount = args.length;

//     let sum = 0;

//     for(const arg of args){
//         sum += arg;
//     }
//     return sum / args.length;
// }

// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2


// ## Example 8 - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏

// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é `formatTime(minutes)` –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ `minutes`
// (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç) –≤ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç `HH:MM`.

// function formatTime(minutes){
//     const hours = Math.floor(minutes / 60); // 1 –≥–æ–¥
//     const minutesLeft = minutes % 60;
//     const convertedHours = hours < 10 ? `0${hours}` : hours;
//     const convertedMinutes = minutesLeft < 10 ? `0${minutesLeft}` : minutesLeft;
//     console.log(`${convertedHours}:${convertedMinutes}`);
// }

// console.log(formatTime(70));
// console.log(formatTime(450));
// console.log(formatTime(1441));




// –¢–æ–±—Ç–æ –∑–∞–ø–∏—Å Math.max (... [14, -4, 25, 8, 11]), –ø—ñ—Å–ª—è —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—ó –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —É Math.max (14, -4, 25, 8, 11) - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å ... –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤, —Ç–æ–±—Ç–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î –π–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∏ —É —è–∫–æ—Å—Ç—ñ –æ–∫—Ä–µ–º–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.
// const scores = [89, 64, 42, 17, 93, 51, 26];
// // Change code below this line
// const bestScore = Math.max(...scores);
// const worstScore = Math.min(...scores);


//  –û–ø–µ—Ä–∞—Ü—ñ—è rest –∑–±–∏—Ä–∞—î —Ä–µ—à—Ç—É —É—Å—ñ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, –∞ —Ç–æ–º—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ—é —É –ø—ñ–¥–ø–∏—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —ñ–Ω–∞–∫—à–µ –≤–∏–Ω–∏–∫–Ω–µ –ø–æ–º–∏–ª–∫–∞.
// function multiply(firstNumber, secondNumber, ...otherArgs) {
//     console.log(firstNumber); // –ó–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É
//     console.log(secondNumber); // –ó–Ω–∞—á–µ–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É
//     console.log(otherArgs); // –ú–∞—Å–∏–≤ —ñ–Ω—à–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
//   }
  
//   multiply(1, 2);
//   multiply(1, 2, 3);
//   multiply(1, 2, 3, 4);




const atTheOldToad = {
    potions: [
      { name: "Speed potion", price: 460 },
      { name: "Dragon breath", price: 780 },
      { name: "Stone skin", price: 520 },
    ],
    // Change code below this line
    getPotions() {
      return this.potions;
    },
    addPotion(newPotion) {
        for(const potion of this.potions){
            if (potion.name === newPotion.name) {
                return `Error! Potion ${newPotion.name} is already in your inventory!`;
            }
        }

  
      this.potions.push(newPotion);
    },
    removePotion(potionName) {
      let potionIndex = -1;

      for(let i = 0; i < this.potions.length; i += 1){  
        if(this.potions[i].name === potionName){
            potionIndex = this.potions.indexOf(this.potions[i]);
            console.log(potionIndex)
        }
      }
  
      if (potionIndex === -1) {
        return `Potion ${potionName} is not in inventory!`;
      }
  
      this.potions.splice(potionIndex, 1);
    },
    updatePotionName(oldName, newName) {
        let potionIndex = -1;
    for(const potion of this.potions){
        if(potion.name === oldName){
            potionIndex = this.potions.indexOf(potion);
            console.log(potionIndex)
        }
    }
      
  
      if (potionIndex === -1) {
        return `Potion ${oldName} is not in inventory!`;
      }
  
      this.potions.splice(potionIndex, 1, {...this.potions[potionIndex], name:newName } );
    },
    // Change code above this line
  };

  
//   console.log(atTheOldToad.getPotions())
//   console.log(atTheOldToad.addPotion({ name: "Invisibility", price: 620 }))
//   console.log(atTheOldToad.getPotions())
//   console.log(atTheOldToad.addPotion({ name: "Dragon breath", price: 700 }))
//   console.log(atTheOldToad.getPotions())
//   console.log(atTheOldToad.addPotion({ name: "Stone skin", price: 240 }))
//   console.log(atTheOldToad.removePotion("Dragon breath"))
  console.log(atTheOldToad.getPotions())
  console.log(atTheOldToad.updatePotionName("Dragon breath", "Polymorth"))
  console.log(atTheOldToad.getPotions());





// const atTheOldToad = {
//     potions: [
//       { name: "Speed potion", price: 460 },
//       { name: "Dragon breath", price: 780 },
//       { name: "Stone skin", price: 520 },
//     ],
//     // Change code below this line
//     getPotions() {
//       return this.potions;
//     },
//     addPotion(newPotion) {
//       for (let potion of this.potions) {
//         if (potion.name.includes(newPotion.name)) {
//           return `Error! Potion ${newPotion.name} is already in your inventory!`;
//         }
//       }
  
//       this.potions.push(newPotion);
//     },
//     removePotion(potionName) {
//       const indx = [];
//       for (let {name} of this.potions) {
//         indx.push(name);
//       }
  
//       const potionIndex = indx.indexOf(potionName);
//       console.log(potionIndex);
  
//       if (potionIndex === -1) {
//         return `Potion ${potionName} is not in inventory!`;
//       }
  
//       this.potions.splice(potionIndex, 1);
//     },
//     updatePotionName(oldName, newName) {
  
//      const { potions } = this;
  
//       for (let i = 0; i < potions.length; i += 1){
//         const {name} = this.potions[i];
  
//         if (oldName === name) {
  
//           potions[i].name = newName;
//         } 
  
        
//       }
  
//       // const potionIndex = this.potions.indexOf(oldName);
  
//       // if (potionIndex === -1) {
//       //   return `Potion ${oldName} is not in inventory!`;
//       // }
  
//       // this.potions.splice(potionIndex, 1, newName);
//     },
//     // Change code above this line
//   };
  
//   // console.log(atTheOldToad.addPotion({ name: "Stone skin", price: 520 }));
  
//   // console.log(atTheOldToad.getPotions());
  
//   console.log(atTheOldToad.removePotion('Dragon breath'));
  
//   console.log(atTheOldToad.getPotions());